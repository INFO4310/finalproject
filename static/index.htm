<html>

<head>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <script src="https://unpkg.com/d3-sankey@0"></script>
    <script src="https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/d3-scale-radial.js"></script>
    <style>
        .section {
            background-color: #212E39;
            padding: 20px 200px 20px 200px;
            border: 1px #37444C;
            border-style: solid none;
            margin: 20px 0px 20px 0px;
        }
        
        .bubble:hover {
            cursor: pointer;
        }
        
        .tweet-contain {
            display: block;
            width: 100%;
            height: 300px;
            background-color: #475;
            overflow: scroll;
        }
        
        .before-after-examples {
            width: 100%;
            display: flex;
            justify-content: center;
            height: auto;
            padding-bottom: 50px;
        }

        .before-after-examples div {
            width: 40%;
            text-align: center;
            margin: 10px;
        }
        .tweet-example {
            width: 40%;
            text-align: center;
            margin: 10px;
            min-height: 300px;
        }
        
        #tweet-text-before #tweet-text-after {
            text-align: center;
        }
        
        #analysis2-div {
            text-align: left;
            display: flex;
        }
        
        #analysis2 {
            width: 100%;
        }
        
        .line-graph-axis {
            color: white;
            z-index: -1;
        }
        
        #line-chart-div {
            display: flex;
            justify-content: center;
            margin-top: 50px;
        }
        
        #line-chart-div, 
        #radial-chart-div {
            text-align: center;
            margin:auto;
            margin-bottom: 30px;
        }

        #compareTopics {
            text-align: center;
            width: 100%;
            justify-content: center;
            height: auto;
            padding-bottom: 50px;
        }

        #compare1 {
            margin-right: 5%;
        }
        
        #line-chart-div path:hover {
            cursor: pointer;
        }
        
        span {
            margin-left: 24.5%;
        }
        /* styling for double ended slider is referenced here: https://codepen.io/MinzCode/pen/MWKgyqb */
        #input-slider {
            margin: 0;
            padding: 0;
            height: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .middle {
            position: relative;
            width: 50%;
            max-width: 500px;
        }
        
        .slider {
            position: relative;
            z-index: 1;
            height: 10px;
            margin: 0 15px;
        }
        
        .slider>.track {
            position: absolute;
            z-index: 1;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            border-radius: 5px;
            background-color: #D6EFFF;
        }
        
        .slider>.range {
            position: absolute;
            z-index: 2;
            left: 25%;
            right: 25%;
            top: 0;
            bottom: 0;
            border-radius: 5px;
            background-color: #1DA1F2;
        }
        
        .slider>.thumb {
            position: absolute;
            z-index: 3;
            width: 26px;
            height: 26px;
            background-color: #1DA1F2;
            border-radius: 50%;
            box-shadow: 0 0 0 0 rgba(29, 161, 242, .2);
            transition: box-shadow .3s ease-in-out;
        }
        
        .slider>.thumb.left {
            transform: translate(-13px, -8px);
        }
        
        .slider>.thumb.right {
            transform: translate(13px, -8px);
        }
        
        input[type=range] {
            position: absolute;
            pointer-events: none;
            -webkit-appearance: none;
            z-index: 2;
            height: 10px;
            width: 100%;
            opacity: 0;
        }
        
        input[type=range]::-webkit-slider-thumb {
            pointer-events: all;
            width: 30px;
            height: 30px;
            border-radius: 0;
            border: 0 none;
            background-color: red;
            -webkit-appearance: none;
        }
        
        #line-chart-yaxis {
            z-index: 1;
        }
        
        body {
            background-color: #15202B;
            margin: 50px 0px 100px 0px;
        }
        
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        p {
            color: white;
            font-family: arial;
            margin: 0px 30px 0px 30px;
            font-family: Georgia, 'Times New Roman', Times, serif;
        }
        
        p {
            font-size: 20px;
            line-height: 28px;
            color: white;
            margin-top: 25px;
            margin-bottom: 25px;
        }
        
        h2 {
            font-size: 30px;
            line-height: 30px;
            color: #D36228;
            text-align: center;
            margin-bottom: 10px;
        }
        
        #header {
            margin: 0px 100px 40px 100px;
        }
        
        #top-header {
            color: #1DA1F2;
            margin: 0px;
            padding: 0px;
            font-size: 50px;
        }
        
        #bottom-header {
            margin: 0px;
            padding: 0px;
            font-size: 30px;
        }
        
        #intro {
            margin-top: 20px;
            padding: 20px 200px 20px 200px;
        }
        
        #arrow {
            width: 100px;
            height: 100px;
        }
        
        #text-processing-example {
            display: flex;
            justify-content: center;
            margin: 20px;
            align-items: center;
        }
        
        #text-processing-example p {
            width: 400px;
            margin: 20px;
            background-color: #212E39;
            padding: 20px;
            border: 1px #37444C;
            border-style: solid;
            border-radius: 20px;
        }
        
        #trump_talking {
            width: 500px;
            position: absolute;
            left: -50px;
            z-index: -1;
        }
        
        #bubble-chart {
            position: absolute;
            left: 360;
            z-index: 1;
            margin-top: -60px;
        }
        
        #speech-bub {
            position: absolute;
            width: 1060;
            height: 430;
            left: 340;
            z-index: -1;
            opacity: .4;
        }
        
        #slider-labels {
            margin-top: -1px;
            z-index: -1;
        }
        
        #graph1 {
            min-height: 440px;
            display: flex;
        }
        
        .before-after-labels {
            display: flex;
            width: 100%;
            justify-content: center;
        }
        
        .tweet-labels-divs {
            width: 40%;
            text-align: center;
            margin: 10px 10px 0px 10px;
        }
        
        #hide-show {
            visibility: hidden;
        }
        
        #graph2 {
            margin: 70px 0px 10px 0px
        }

        #compareTopics {
            width: 100%;
            justify-content: center;
            display: none;
        }

        .compare-div {
            text-align: center;
        }
        h3{
           margin-bottom: 20px;
        }
        .filler-div {
            display: flex;
            justify-content: center;
            align-items: center;
            height: auto;
            background-color: #000000;
            border-radius: 10px;
            border: 1px #2E3336 solid;
        }
        #real-row {
            display: none;
        }
        a {
            color: #D36228;
        }
    </style>
</head>

<body>
    <div id="header">
        <h1 id="top-header">Donald Trump's Tweets</h1>
        <h1 id="bottom-header">Before and During Presidency</h1>
    </div>
    <div id="intro">
        <h2>What is on Donald Trump's Mind?</h2>
        <p>
            Donald Trump is many things: a business man, a television personality, an avid Twitter user, and the 45th President of the United States. Because of the complexity of his character, many have taken to Trump's Twitter account to gain insight to the intricate
            mechanisms of his mind. And like many others, we too were curious to understand what it was like in the life of the 45th President of the United States.
            <p>
                <p>
                    For this article we have processed all 36,307 tweets Trump has posted from 2009 (3 years after Twitter was founded) to 2018. Keeping in mind, that to reach this number of tweets, Trump had to have created about 11 tweets a day, everyday, for 9 years...that's
                    a lot of thoughts!
                </p>
                <p>
                    So, we analyzed these tweets through three visualizations all detailing Trump's thought processes and activities during those 9 years. Because Trump's tweets have been analyzed extensively by many others, our team decided that we wanted to highlight specifically
                    the types of topics Trump thought about before presidency and during presidency.
                </p>
                <p> To do this, we took a dataset gathered via the Twitter API and processed them using the
                    <a href="https://www.nltk.org/">'NLTK' natural language processing toolkit.</a> This tool allowed our team to preprocess Trump's tweets and extract the core topics discussed per each tweet. Below you can see how we processed Trump's
                    first-ever tweet.
                </p>
                <div id="text-processing-example">
                    <p>"Be sure to tune in and watch Donald Trump on Late Night with David Letterman as he presents the Top Ten List tonight!"</p>
                    <img src="right-arrow.png" alt="arrow" id="arrow">
                    <p>["sure", "tune", "watch", "donald", "trump", "late", "night", "david", "letterman", "presents", "top", "ten", "list", "tonight"]</p>
                </div>
    </div>
    <div class="section">
        <h2>Trump's Favorite Topics</h2>
        <p>
            First, we have included a bubble chart of the most popular words of all time that Trump has tweeted. Hover over each bubble to see his most favorited tweet that uses that word from before and during his presidency. The words included in this chart are
            the words that he said more than 500 times over all time. The radius reflects the frequency of his use of each word. Unsurprisingly, the five most frequent words Trump says are: Great, Trump, Thank, President, Obama.
        </p>
    </div>
    <div id="graph1">
        <img id="trump_talking" src="IMG_0109.PNG" alt="Trump Talking">
        <svg id="bubble-chart"></svg>
        <img id="speech-bub" src="SpeechBub.png" alt="Speech Bubble Drawing">
    </div>
    <div id="tweet-contain">
        <p style="text-align: center">Hover over a topic to view Trump's most favorited tweets containing that word before and during presidency.</p>
        <div class="before-after-labels">
            <div class="tweet-labels-divs">
                <h2 class="before-after">Before Presidency</h2>
            </div>
            <div class="tweet-labels-divs">
                <h2 class="before-after">During Presidency</h2>
            </div>
        </div>
        <div class="before-after-examples" id="filler-row">
            <div class="tweet-example filler-div">
                <h3>
                    No Topic Selected
            </h3></div>
            <div class="tweet-example filler-div"><h3>
                No Topic Selected
        </h3></div>
        </div><div class="before-after-examples" id ="real-row">
            <div id="tweet-example-before" class="tweet-example"></div>
            <div id="tweet-example-after" class="tweet-example"></div>
        </div>
    </div>
    <div class="section">
        <h2>Tweets Over the Years</h2>
        <p>
            Next, we have included a line chart that shows the frequency over time of words that Trump has tweeted. This chart includes the top five words that Trump tweeted before his presidency, and the top five words that Trump has tweeted during his presidency.
            Move your mouse over the lines to see the word each line represents and the number of times Trump has tweeted it at different times. Most notably, we can see that Trump has a lot to say about Obama during the 2012 US Presidential Election,
            and he has even more to say about himself in the time leading up to the 2016 US Presidential Election. Use the slider below to investigate more specific time frames.
        </p>
    </div>
    <!-- code referenced from here: https://codepen.io/MinzCode/pen/MWKgyqb -->
    <div id="graph2">
        <div id="input-slider">
            <div class="middle">
                <div class="multi-range-slider">
                    <input type="range" id="input-left" min="0" max="115" value="0">
                    <input type="range" id="input-right" min="0" max="115" value="115">
                    <div class="slider">
                        <div class="track"></div>
                        <div class="range"></div>
                        <div class="thumb left"></div>
                        <div class="thumb right"></div>
                    </div>
                </div>
                <svg id="slider-labels"></svg>
            </div>
        </div>
        <div id="line-chart-div">
            <svg id="line-chart-yaxis"></svg>
            <svg id="line-chart"></svg>
        </div>
    </div>
    <div class="section">
        <h2>Tweeting Around the Clock</h2>
        <p>
            Finally, we have included two circular bar charts to explore the different times of day that Trump has tweeted, before and during his presidency. Before his presidency, he primarily spent his afternoons tweeting, but during his presidency, it seems Trump has found that his best thoughts occur in the morning, just after he wakes up. Move your mouse over the bars to see the top topics he tweets about at different times of the day and night, as well as the quantity of tweets he has composed at that hour. 
        </p>
    </div>
    <div id="radial-chart-div">
        <div class="before-after-examples" >
            <div>
        <svg id="radial" width="600" height="500"></svg></div>
        <div><svg id="radial2" width="600" height="500"></svg></div>
    </div>
    </div>
    <div id="compareTopics" class="before-after-examples">
        <div class="compare-div">
            <svg id="compare1"></svg></div>
        <div class="compare-div">
            <svg id="compare2"></svg></div>
    </div>
    <div class="section">
        <h2>Concluding Thoughts</h2>
        <p>
            As we can see from these charts, Trump’s behavior clearly changed before and during his presidency. He has new favorite words during his presidency, as well as a modified tweeting schedule. This visualization has also allowed us to see the different ideas about which he frequently tweets, including his idol, Obama. While Trump’s tweeting patterns may continue to change as he begins the next phase of his life post-presidency, we provide insight into how Trump’s presidency has changed his life, via his tweets. 
        </p>
    </div>
    <script>
        ////////////////////////////////////////////////////////SETTING UP TWITTER INTEGRATION//////////////////////////////////////////////////
        //code referenced from here: https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-javascript-factory-function  

        window.twttr = (function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0],
                t = window.twttr || {};
            if (d.getElementById(id)) return t;
            js = d.createElement(s);
            js.id = id;
            js.src = "https://platform.twitter.com/widgets.js";
            fjs.parentNode.insertBefore(js, fjs);

            t._e = [];
            t.ready = function(f) {
                t._e.push(f);
            };

            return t;
        }(document, "script", "twitter-wjs"));

        ////////////////////////////////////////////////////////CREATING BUBBLE CHART//////////////////////////////////////////////////
        // used https://bl.ocks.org/officeofjane/a70f4b44013d06b9c0a973f163d8ab7a as a reference
        const load_network_graph = async() => {

            //define variables
            const rawData = await d3.csv('processed_tweets/bubble/Bubble_Chart_Data.csv');
            const width = 1100;
            const height = 550;
            const center = {
                "x": width / 2,
                'y': height / 2
            };
            let svg = null;
            let bubbles = null;
            let labels = null;
            let nodes = [];

            //define forces
            function charge(d) {
                return Math.pow(d.radius, 2.0) * 0.03
            }
            var simulation = d3.forceSimulation(nodes)
                .force('charge', d3.forceManyBody().strength(charge))
                .force('center', d3.forceCenter(width / 2, height / 2))
                .on('tick', ticked)
                .force('collision', d3.forceCollide().radius(function(d) {
                    return d.radius
                }))
                .force('y', d3.forceY().strength(.08).y(function(d) {
                    return 0;
                }))
            simulation.stop();

            //define color scale
            var fillColor = d3.scaleLinear()
                .domain([500, 1000, 2000, 5000])
                .range(['#D6EFFF', "#A6DBFC", "#75C6F8", "#1DA1F2"])
                .clamp(true)
                .interpolate(d3.interpolateHcl);

            //create bubbles
            function createNodes() {
                const maxSize = d3.max(rawData, d => +d.value);
                const radiusScale = d3.scaleSqrt()
                    .domain([0, maxSize])
                    .range([0, 70])
                const myNodes = rawData.map(d => ({
                    name: d.name,
                    value: d.value,
                    radius: radiusScale(+d.value),
                    size: +d.value,
                    x: Math.random() * 900,
                    y: Math.random() * 800
                }))

                return myNodes;
            }
            createNodes();


            //append circles and labels to svg
            let chart = function chart(rawData) {
                nodes = createNodes(rawData);

                svg = d3.select('#bubble-chart')
                    .attr('width', width)
                    .attr('height', height)

                const elements = svg.selectAll('.bubble')
                    .data(nodes, d => d.name)
                    .enter()
                    .append('g')

                bubbles = elements
                    .append('circle')
                    .classed('bubble', true)
                    .attr('r', d => d.radius)
                    .attr('fill', d => fillColor(d.value))
                    .on("mouseover", bubbleMouseover)
                    .on("mouseout", bubbleMouseout)
                    .attr("name", d => d.name)

                labels = elements
                    .append('text')
                    .attr('dy', '.3em')
                    .style('text-anchor', 'middle')
                    .style('font-size', 12)
                    .style('font-weight', 'bold')
                    .text(d => d.name.charAt(0).toUpperCase() + d.name.slice(1))

                //run animation
                simulation.nodes(nodes)
                    .on('tick', ticked)
                    .restart();
            }

            function ticked() {
                bubbles
                    .attr('cx', d => d.x)
                    .attr('cy', d => d.y)

                labels
                    .attr('x', d => d.x)
                    .attr('y', d => d.y)
            }
            chart();

            //hover functionality: show tweets of topic
            function bubbleMouseover() {
                let hoverData = d3.json('processed_tweets/bubble/Bubble_Chart_Hover_Data.json').then((hoverData) => {
                    bubble = d3.select(this)
                    bubble.attr("stroke-width", 4).attr("stroke", "#000")
                    let singleData = hoverData.filter(function(datum) {
                        return datum.name === bubble.attr("name");
                    })

                    d3.selectAll('#hide-show').attr("visibility", "visible")

                    //get before and after tweets containing topic
                    beforeTweet = singleData[0].tweet_before.id_str;
                    afterTweet = singleData[0].tweet_after.id_str;

                    //clear any existing tweets
                    d3.select("#tweet-example-before")
                        .text("")
                    d3.select("#tweet-example-after")
                        .text("")
                    d3.select("#filler-row").remove();
                    d3.select("#real-row").style("display", "flex");

                    //dynamically load embedded tweet
                    //code refereced from here: https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-javascript-factory-function
                    twttr.widgets.createTweet(
                        beforeTweet,
                        document.getElementById('tweet-example-before'), {
                            theme: 'dark',
                            align: 'center',
                            cards: 'hidden',
                            conversation: 'none'
                        }
                    );

                    twttr.widgets.createTweet(
                        afterTweet,
                        document.getElementById('tweet-example-after'), {
                            theme: 'dark',
                            align: 'center',
                            cards: 'hidden',
                            conversation: 'none'
                        }
                    );

                }, (error) => {
                    console.log(error);
                });
            }

            function bubbleMouseout() {
                bubble = d3.select(this)
                bubble.attr("stroke", "none")

            }
        }
        load_network_graph();


        ////////////////////////////////////////////////////////CREATING LINE CHART/////////////////////////////////////////////////////
        // referenced this site to add xAxis manipulation: https://www.d3-graph-gallery.com/graph/line_change_data.html
        // referenced this site to add hover interactions: https://observablehq.com/@d3/multi-line-chart
        const load_line_graph = async() => {


            //define variables and chart
            const margin = {
                top: 50,
                right: 60,
                bottom: 50,
                left: 60
            };
            const width = 1000
            const height = 500
            svg = d3.select('#line-chart')
            svg.attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            linechart = svg.append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


            const data = await d3.json('processed_tweets/timeline/timeline_data.json');

            //found this value while creating the dataset
            let maxOccurrences = 200;

            //creating initial date range for xAxis using the first and last items in my data.dates array
            let minDate = new Date(data.dates[0])
            let maxDate = new Date(data.dates[115]);

            //adding labels to double input slider here
            sliderLbls = d3.selectAll("#slider-labels")
                .attr('width', 500)
                .attr('height', 50)

            var sliderScale = d3.scaleTime().domain([new Date(data.dates[0]), new Date(data.dates[115])]).range([20, 480])
            sliderLbls.append("g")
                .attr("class", "line-graph-axis")
                .attr("transform", "translate(" + 0 + "," + 0 + ")")
                .call(d3.axisBottom(sliderScale));
            sliderLbls.append("text")
                // .attr("transform", "rotate(-90)")
                .attr("y", 30)
                .attr("x", 250)
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .style("fill", "white")
                .text("Change the Date Range");

            //initialize Xaxis
            var scaleX = d3.scaleTime().range([-margin.left, width + margin.right - 1]);
            var xAxis = d3.axisBottom(scaleX)
            svg.append("g")
                .attr("class", "line-graph-axis")
                .attr("id", "x-axis")
                .attr("transform", "translate(" + margin.left + "," + height + ")")
            svg.append("text")
                .attr("transform",
                    "translate(" + ((width / 2) + margin.left) + " ," +
                    (height + margin.top + 10) + ")")
                .style("text-anchor", "middle")
                .style("fill", "white")
                .text("Date");

            //adding Yaxis to separate svg
            //this was done to mitigate some styling issues resulting from timeline expansion
            yAxisSvg = d3.selectAll('#line-chart-yaxis')
                .attr("width", 100)
            var scaleY = d3.scaleLinear()
                .domain([0, maxOccurrences])
                .range([height - margin.bottom, 0]);
            var yAxis = yAxisSvg.append("g")
                .attr("class", "line-graph-axis")
                .attr("transform", "translate(" + 99 + "," + margin.top + ")")
                .call(d3.axisLeft(scaleY));
            yAxisSvg.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 30)
                .attr("x", 0 - (height / 2))
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .style("fill", "white")
                .text("Number of Occurrences");



            ///////////////////////////////////////////////START: UPDATE TIMELINE BASED ON SLIDER/////////////////////////////////////////////////////
            function update_chart(minIndex, maxIndex) {

                //get input values
                minIndex = document.getElementById("input-left").value;
                maxIndex = document.getElementById("input-right").value;

                //create scale based on input values
                scaleX.domain([new Date(data.dates[minIndex]), new Date(data.dates[maxIndex])])

                //draw x axis
                d3.selectAll("#x-axis").transition()
                    .duration(500)
                    .call(xAxis)


                //draw graph given defined xAxis
                line = d3.line()
                    .defined(d => !isNaN(d))
                    .x((d, i) => scaleX(new Date(data.dates[i])))
                    .y(d => scaleY(d))


                const path = linechart
                    .selectAll("path")
                    .data(data.series)
                    .join("path")
                    .attr("d", d => line(d.values))
                    .attr("fill", "none")
                    .attr("stroke", "#1DA1F2")
                    .attr("class", "lines")
                    .attr("stroke-width", 4)
                    .attr("stroke-linejoin", "round")
                    .attr("stroke-linecap", "round")

                //add line to indicate presidency
                //delete old line everytime chart updates
                d3.selectAll("#pres-annotation").remove();
                d3.selectAll("#annotation-lbl").remove();
                //redraw line
                linechart.append("line")
                    .attr('id', 'pres-annotation')
                    .attr("x1", scaleX(new Date(2016, 10, 8)))
                    .attr("y1", 0)
                    .attr("x2", scaleX(new Date(2016, 10, 8)))
                    .attr("y2", height - margin.bottom)
                    .attr("stroke-dasharray", "5,5")
                    .attr("stroke", "white")
                    .attr("stroke-width", 1)

                linechart.append('text')
                    .attr("y", 0)
                    .attr("id", "annotation-lbl")
                    .attr("x", scaleX(new Date(2016, 10, 8)) + 5)
                    .attr("dy", "1em")
                    .style("text-anchor", "left")
                    .style("fill", "white")
                    .text('Trump Elected President')

                //add line for Obama's presidency
                //delete old line everytime chart updates
                d3.selectAll("#obama-line").remove();
                d3.selectAll("#obama-lbl").remove();
                //redraw line
                linechart.append("line")
                    .attr('id', 'obama-line')
                    .attr("x1", scaleX(new Date(2012, 10, 6)))
                    .attr("y1", 0)
                    .attr("x2", scaleX(new Date(2012, 10, 6)))
                    .attr("y2", height - margin.bottom)
                    .attr("stroke-dasharray", "5,5")
                    .attr("stroke", "white")
                    .attr("stroke-width", 1)

                linechart.append('text')
                    .attr("y", 0)
                    .attr("id", "obama-lbl")
                    .attr("x", scaleX(new Date(2012, 10, 6)) + 5)
                    .attr("dy", "1em")
                    .style("text-anchor", "left")
                    .style("fill", "white")
                    .text('Obama Elected President')


                //adding hover function to viz here
                svg.call(hover, path);

                ////////////////////////////////////START: HOVER TIMELINE INTERACTION ///////////////////////////
                //code referenced from https://observablehq.com/@d3/multi-line-chart
                function hover(linechart, path) {

                    //add interaction functions to path
                    path
                        .on("mousemove", moved)
                        .on("mouseover", entered)
                        .on("mouseout", left);

                    //delete existing dots
                    d3.selectAll('#dot').remove();

                    //initialize position dot
                    const dot = linechart.append("g")
                        .attr('id', 'dot')
                        .attr("display", "none");
                    dot.append("circle")
                        .attr("r", 4)
                        .attr("fill", "white")
                    dot.append("text")
                        .attr("font-family", "sans-serif")
                        .attr("font-size", 20)
                        .attr("fill", "white")
                        .attr("text-anchor", "middle")
                        .attr("y", -12);

                    //function if moving mouse on a path
                    function moved(event) {

                        //get mouse position
                        var coordinates = d3.mouse(this);
                        var xm = scaleX.invert(coordinates[0]);
                        var ym = scaleY.invert(coordinates[1]);

                        //find nearest month to mouse
                        let i = null;
                        data.dates.forEach((d, idx) => {
                            e = new Date(d)
                            if (e.getMonth() == xm.getMonth() && e.getYear() == xm.getYear()) {
                                i = idx;
                            }
                        })

                        //get nearest line given month
                        let s = null;
                        let distance = Infinity;
                        data.series.forEach((d) => {
                            if (Math.abs(d.values[i] - ym) < distance) {
                                distance = Math.abs(d.values[i] - ym)
                                s = d;
                            }
                        })

                        //given nearest line, color paths accordingly, highlight and lowlight
                        path.attr("stroke", d => d !== s ? "#212E39" : "#1DA1F2").filter(d => d === s).raise();

                        //add dot to location and label
                        dot.attr("transform", `translate(${margin.left+scaleX(new Date(data.dates[i]))},${margin.top+scaleY(s.values[i])})`);
                        dot.select("text").text(s.name.charAt(0).toUpperCase() + s.name.slice(1) + ", " + s.values[i] + " times");
                    }

                    function entered() {
                        dot.attr("display", null);
                    }

                    function left() {
                        path.attr("stroke", "#1DA1F2");
                        dot.attr("display", "none");
                    }
                }
                ////////////////////////////////////END: HOVER TIMELINE INTERACTION ///////////////////////////
            }


            //call the first chart with entire xaxis values
            update_chart(0, 115)

            ///////////////////////////////////////////////END: UPDATE TIMELINE BASED ON SLIDER/////////////////////////////////////////////////////

            ///////////////////////////////////////////////HANDLE DOUBLE ENDED SLIDER/////////////////////////////////////////////////////
            //code referenced: https://codepen.io/MinzCode/pen/MWKgyqb
            var minIndex
            var maxIndex
            

            //need to use these particular getter functions, d3 will not work
            var inputLeft = document.getElementById("input-left");
            var inputRight = document.getElementById("input-right");

            var thumbLeft = document.querySelector(".slider > .thumb.left");
            var thumbRight = document.querySelector(".slider > .thumb.right");
            var range = document.querySelector(".slider > .range");


            function getLeft() {
                min = parseInt(inputLeft.min),
                max = parseInt(inputLeft.max);

                inputLeft.value = Math.min(parseInt(inputLeft.value), parseInt(inputRight.value) - 1);
                minIndex = inputLeft.value;
                var percent = ((inputLeft.value - min) / (max - min)) * 100;

                thumbLeft.style.left = percent + "%";
                range.style.left = percent + "%";
            }
            getLeft();

            function getRight() {
                min = parseInt(inputRight.min),
                max = parseInt(inputRight.max);

                inputRight.value = Math.max(parseInt(inputRight.value), parseInt(inputLeft.value) + 1);
                maxIndex = inputRight.value;

                var percent = ((inputRight.value - min) / (max - min)) * 100;

                thumbRight.style.right = (100 - percent) + "%";
                range.style.right = (100 - percent) + "%";
            }
            getRight();

            inputLeft.addEventListener("input", getLeft);
            inputRight.addEventListener("input", getRight);

            //every time the element is altered, redraw line chart
            inputRight.addEventListener("input", update_chart);
            inputLeft.addEventListener("input", update_chart);

        }
        load_line_graph();



        ///////////////////////////////////////////////////////CREATING RADIAL CHART/////////////////////////////////////////////////////
        //Referenced code from https://bl.ocks.org/bricedev/7952923003a8cf0ecb45
        const drawRadial = async() => {
            const radialsvg = d3.select("#radial");
            const radialsvg2 = d3.select("#radial2");
            const width = radialsvg.attr("width");
            const height = radialsvg.attr("height");
            let header1 = radialsvg.append("text")
                .attr("fill", "#D36228")
                .attr("x", width/2 - 140)
                .attr("y", 25)
                .style("font-size", 34)
                .style("font-weight", "bold")
                .text("Before Presidency");
            let header2 = radialsvg2.append("text")
                .attr("fill", "#D36228")
                .attr("x", width/2 - 140)
                .attr("y", 25)
                .style("font-size", 34)
                .style("font-weight", "bold")
                .text("During Presidency");
            const radialChart = radialsvg.append("g")
                .attr("id", "chart")
                .attr("transform", "translate(" + width / 2 + "," + (height / 2 + 20)+")");
            const radialChart2 = radialsvg2.append("g")
                .attr("id", "chart")
                .attr("transform", "translate(" + width / 2 + "," + (height / 2 + 20) + ")");

            const b4tweets = await d3.json("processed_tweets/hours/before.json");
            const aftertweets = await d3.json("processed_tweets/hours/after.json");

            var b4counts = [];
            var aftercounts = [];

            b4tweets.forEach(d => {
                b4counts.push(d["frequency"]);
            })

            aftertweets.forEach(d => {
                aftercounts.push(d["frequency"]);
            })

            var b4dataExtent = d3.extent(b4counts);
            var afterdataExtent = d3.extent(aftercounts);
            var clock = ["12AM", "1AM", "2AM", "3AM", "4AM", "5AM", "6AM", "7AM", "8AM", "9AM", "10AM", "11AM", "12PM", "1PM", "2PM", "3PM", "4PM", "5PM", "6PM", "7PM", "8PM", "9PM", "10PM", "11PM"]
            var hourBars = clock.length;

            // scales
            var barHeight = height / 2 - 40;
            var x = d3.scaleLinear()
                .domain(b4dataExtent)
                .range([0, -barHeight]);
            var xAxis = d3.axisLeft(x)
                .ticks(3);
            var barScale = d3.scaleLinear()
                .domain(b4dataExtent)
                .range([0, barHeight]);
            var barScale2 = d3.scaleLinear()
                .domain(afterdataExtent)
                .range([0, barHeight]);

            function hoverBox(chartArea, tweetBox, idlabel){
              //drawing the text box for labels
              let labelWidth = 160;
              let labelHeight = 50;

              var labelBox = chartArea.append("g")
                  .attr("id", tweetBox)
                  .attr("visibility", "hidden")
                  .attr("width", labelWidth)
                  .attr("height", labelHeight)
              labelBox.append("rect")
                  .attr("fill", "white")
                  .attr("rx", 10)
                  .attr("opacity", 0.9)
                  .attr("width", labelWidth)
                  .attr("height", labelHeight)
              labelBox.append("text")
                  .attr("class", "text")
                  .attr("id", idlabel)
                  .attr("x", 8)
                  .attr("y", 16)
                  .attr("font-size", 18)
                  .attr("text-anchor", "start")
                  .attr("text-align", "center")
                  .attr("alignment-baseline", "text-before-edge")
                  .attr("font-weight", "bold");
            } 

            function compareBox(svg, name, rect, time, words){
              //drawing the text box for labels
              let compareWidth = 450;
              let compareHeight = 200;

                svg.attr("width", compareWidth).attr("height", compareHeight)
              let compareBox = svg.append("g")
                  .attr("id", name)
                  .attr("visibility", "hidden")
                  .attr("width", compareWidth)
                  .attr("height", compareHeight)
              compareBox.append("rect")
                  .attr("id", rect)
                  .attr("fill", "white")
                  .attr("rx", 10)
                  .attr("opacity", 0.9)
                  .attr("width", compareWidth)
                  .attr("height", compareHeight)
                  .attr("border-radius", 10)
                  .attr("stroke", "#2E3336")
                  .attr("stroke-width", 2)
              compareBox.append("text")
                  .attr("class", "text")
                  .attr("id", time)
                  .attr("x", compareWidth/2 - 180)
                  .attr("y", compareHeight/8)
                  .attr("font-size", 20)
                  .attr("text-anchor", "start")
                  .attr("text-align", "center")
                  .attr("alignment-baseline", "text-before-edge")
                  .attr("font-weight", "bold");
                words.forEach((d,i) => {
                    compareBox.append("text")
                        .attr("class", "text")
                        .attr("id", d)
                        .attr("x", compareWidth / 2 - 150)
                        .attr("y", compareHeight / 3 + i*20)
                        .attr("font-size", 16)
                        .attr("text-anchor", "start")
                        .attr("text-align", "center")
                        .attr("alignment-baseline", "text-before-edge")
                        .attr("font-weight", "bold");
                })
            } 

            const comparesvg = d3.select("#compare1");
            const comparesvg2 = d3.select("#compare2");
            compareBox(comparesvg, "compareBox1", "box1", "time1",["word1", "word2", "word3", "word4", "word5"])
            compareBox(comparesvg2, "compareBox2", "box2", "time2",["top1", "top2", "top3", "top4", "top5"])

            function drawBars(chartArea, data, scale) {
                var bars = chartArea.append("g")
                    .selectAll("path")
                    .data(data)
                    .enter()
                    .append("path")
                    .attr("class", "bars")
                    .attr("fill", "#1DA1F2")
                    .attr("id", d => {
                        return d.frequency
                    })
                    .attr("d", d3.arc()
                        .innerRadius(0)
                        .outerRadius(d => {
                            return scale(+d.frequency);
                        })
                        .startAngle((d, i) => {
                            return (i * 2 * Math.PI) / hourBars;
                        })
                        .endAngle((d, i) => {
                            return ((i + 1) * 2 * Math.PI) / hourBars;
                        }))
                        
                bars.on("mouseover", function(){
                  let tweetbar = d3.select(this)
                  tweetbar.transition().duration(200)
                    .attr("fill", "yellow");
                  
                  let tweetinfo = tweetbar.datum().frequency + " tweets at " + tweetbar.datum().time;
                  let coordinates = d3.mouse(this);

                    if(chartArea == radialChart){
                      d3.select("#b4tweetBox").attr("visibility", "visible")
                        .attr("transform", "translate(" + (coordinates[0]) + "," + (coordinates[1]) + ")");
                      d3.select("#b4tweetnum").text(tweetinfo);
                      d3.select("#compareBox1").attr("visibility", "visible");
                      d3.select("#compareBox2").attr("visibility", "visible");
                      d3.select("#compareTopics").style("display", "flex");
                      d3.select("#box1").attr("stroke", "#1DA1F2").attr("stroke-width",5)
                  
                      let time = "Top 5 Pre-Elected Tweeted Words at "+tweetbar.datum().time;
                      d3.select("#time1").text(time);
                      let time2 = "Top 5 Post-Elected Tweeted Words at "+tweetbar.datum().time;
                      d3.select("#time2").text(time2);
                  
                      let topiclist = b4tweets[tweetbar.datum().hour].topics;
                      let topiclist2 = aftertweets[tweetbar.datum().hour].topics;
                      topiclist.forEach((d,i)=>{
                        if (i<=5){
                          let topword=(i)+") "+'"'+topiclist[i]["name"]+'"'+" tweeted "+topiclist[i]["value"]+" times";
                          d3.select("#word"+i).text(topword);
                        }
                      })
                      topiclist2.forEach((d,i)=>{
                        if (i<=5){
                          let topword=(i)+") "+'"'+topiclist2[i]["name"]+'"'+" tweeted "+topiclist2[i]["value"]+" times";
                          d3.select("#top"+i).text(topword);
                        }
                      })

                    } else {
                      d3.select("#aftertweetBox").attr("visibility", "visible")
                      .attr("transform", "translate(" + (coordinates[0]) + "," + (coordinates[1]) + ")");
                      d3.select("#aftertweetnum").text(tweetinfo);
                      d3.select("#compareBox2").attr("visibility", "visible");
                      d3.select("#compareBox1").attr("visibility", "visible");
                      d3.select("#compareTopics").style("display", "flex");
                      d3.select("#box2").attr("stroke", "#1DA1F2").attr("stroke-width",5)
                  
                      let time2 = "Top 5 Post-Elected Tweeted Words at "+tweetbar.datum().time;
                      d3.select("#time2").text(time2);
                      let time = "Top 5 Pre-Elected Tweeted Words at "+tweetbar.datum().time;
                      d3.select("#time1").text(time);
                  
                      let topiclist2 = aftertweets[tweetbar.datum().hour].topics;
                      let topiclist = b4tweets[tweetbar.datum().hour].topics;
                      topiclist2.forEach((d,i)=>{
                        if (i<=5){
                          let topword=(i)+") "+'"'+topiclist2[i]["name"]+'"'+" tweeted "+topiclist2[i]["value"]+" times";
                          d3.select("#top"+i).text(topword);
                        }
                      })
                      topiclist.forEach((d,i)=>{
                        if (i<=5){
                          let topword=(i)+") "+'"'+topiclist[i]["name"]+'"'+" tweeted "+topiclist[i]["value"]+" times";
                          d3.select("#word"+i).text(topword);
                        }
                      })
                    }
                })
                bars.on("mouseout", function () {
                  let tweetbar = d3.select(this)
                  tweetbar.transition().duration(200)
                    .attr("fill", "#1DA1F2");

                  if(chartArea == radialChart){
                      d3.select("#b4tweetBox").attr("visibility", "hidden")
                      d3.select("#b4tweetnum").text("");
                      d3.select("#box1").attr("stroke", "none");
                      
                  } else {
                      d3.select("#aftertweetBox").attr("visibility", "hidden");
                      d3.select("#aftertweetnum").text("");
                      d3.select("#box2").attr("stroke", "none");
                  }

                }) 
            }

            drawBars(radialChart, b4tweets, barScale);
            drawBars(radialChart2, aftertweets, barScale2);

            //draw "concentric" circles
            function drawCircle(chartArea, scale) {
                chartArea.selectAll("circle")
                    .data(x.ticks(3))
                    .enter().append("circle")
                    .attr("r", d => {
                        return scale(d);
                    })
                    .style("font-color", "white")
                    .style("fill", "none")
                    .style("stroke", "white")
                    .style("stroke-dasharray", "2,2")
                    .style("stroke-width",".5px");
            }
            drawCircle(radialChart, barScale);
            drawCircle(radialChart2, barScale2);

            // setting lines
            function innerScale(chartArea) {
                chartArea.append("circle")
                    .attr("r", barHeight)
                    .classed("outer", true)
                    .style("fill", "none")
                    .style("stroke", "white")
                    .style("stroke-width", "1px");
                chartArea.selectAll("line")
                    .data(clock)
                    .enter().append("line")
                    .attr("y2", -barHeight - 20)
                    .style("fill", "none")
                    .style("stroke", "white")
                    .style("stroke-width", "1px")
                    .attr("transform", function(d, i) {
                        return "rotate(" + (i * 360 / hourBars) + ")";
                    });
                chartArea.append("g")
                    .attr("class", "x axis")
                    .style("fill", "none")
                    .style("color", "white")
                    .style("font-weight", "bold")
                    .call(xAxis);
            }
            innerScale(radialChart)
            innerScale(radialChart2)
            hoverBox(radialChart, "b4tweetBox", "b4tweetnum")
            hoverBox(radialChart2, "aftertweetBox","aftertweetnum")

            // labeling hours around circle
            function drawLabels(chartArea) {
                let labelRadius = barHeight * 1.025;
                let labels = chartArea.append("g")
                    .classed("labels", true);

                labels.append("def")
                    .append("path")
                    .attr("id", "label-path")
                    .attr("d", "m0 " + -labelRadius + " a" + labelRadius + " " + labelRadius + " 0 1,1 -0.01 0");

                labels.selectAll("text")
                    .data(clock)
                    .enter().append("text")
                    .style("text-anchor", "middle")
                    .style("font-weight", "bold")
                    .style("fill", "white")
                    .append("textPath")
                    .attr("xlink:href", "#label-path")
                    .attr("startOffset", function(d, i) {
                        return i * 100 / hourBars + 50 / hourBars + '%';
                    })
                    .text(function(d) {
                        return d
                    });
            }
            drawLabels(radialChart);
            drawLabels(radialChart2);
            
        }
        drawRadial();
    </script>
</body>

</html>