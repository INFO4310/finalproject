<html>

<head>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <script src="https://unpkg.com/d3-sankey@0"></script>
    <script src="https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/d3-scale-radial.js"></script>
    <style>
        .section {
            background-color: #212E39;
            padding: 20px 200px 20px 200px;
            border: 1px #37444C;
            border-style: solid none;
        }
        
        #analysis2 {
            width: 50%;
        }
        
        .bubble:hover {
            cursor: pointer;
        }
        
        .tweet-contain {
            display: block;
            width: 100%;
            height: 300px;
            background-color: #475;
            overflow: scroll;
        }
        
        .tweet-examples {
            width: 100%;
            display: flex;
            justify-content: center;
            min-height: 300px;
            height: auto;
        }
        
        .tweet-example {
            width: 40%;
            text-align: center;
            margin: 10px;
        }
        
        #tweet-text-before #tweet-text-after {
            text-align: center;
        }
        
        #analysis2-div {
            text-align: left;
            display: flex;
        }
        
        #analysis2 {
            width: 100%;
        }
        
        .line-graph-axis {
            color: white;
            z-index: -1;
        }
        
        #line-chart-div {
            display: flex;
            justify-content: center;
        }
        
        #line-chart-div,
        #radial-chart-div {
            text-align: center;
        }
        
        #line-chart-div path:hover {
            cursor: pointer;
        }
        
        h3 {
            text-align: left;
        }
        
        span {
            margin-left: 24.5%;
        }
        /* (['#D6EFFF', "#A6DBFC","#75C6F8","#1DA1F2"]) */
        /* styling two range slider */
        
        #input-slider {
            margin: 0;
            padding: 0;
            height: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .middle {
            position: relative;
            width: 50%;
            max-width: 500px;
        }
        
        .slider {
            position: relative;
            z-index: 1;
            height: 10px;
            margin: 0 15px;
        }
        
        .slider>.track {
            position: absolute;
            z-index: 1;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            border-radius: 5px;
            background-color: #D6EFFF;
        }
        
        .slider>.range {
            position: absolute;
            z-index: 2;
            left: 25%;
            right: 25%;
            top: 0;
            bottom: 0;
            border-radius: 5px;
            background-color: #1DA1F2;
        }
        
        .slider>.thumb {
            position: absolute;
            z-index: 3;
            width: 30px;
            height: 30px;
            background-color: #1DA1F2;
            border-radius: 50%;
            box-shadow: 0 0 0 0 rgba(29, 161, 242, .2);
            transition: box-shadow .3s ease-in-out;
        }
        
        .slider>.thumb.left {
            left: 25%;
            transform: translate(-15px, -10px);
        }
        
        .slider>.thumb.right {
            right: 25%;
            transform: translate(15px, -10px);
        }
        
        .slider>.thumb.hover {
            box-shadow: 0 0 0 20px rgba(29, 161, 242, .2);
        }
        
        .slider>.thumb.active {
            box-shadow: 0 0 0 40px rgba(29, 161, 242, .2);
        }
        
        input[type=range] {
            position: absolute;
            pointer-events: none;
            -webkit-appearance: none;
            z-index: 2;
            height: 10px;
            width: 100%;
            opacity: 0;
        }
        
        input[type=range]::-webkit-slider-thumb {
            pointer-events: all;
            width: 30px;
            height: 30px;
            border-radius: 0;
            border: 0 none;
            background-color: red;
            -webkit-appearance: none;
        }
        
        #line-chart-yaxis {
            z-index: 1;
        }
        
        body {
            background-color: #15202B;
            margin: 50px 0px 100px 0px;
        }
        
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        p {
            color: white;
            font-family: arial;
            margin: 0px 30px 0px 30px
        }
        
        p {
            font-size: 20px;
            line-height: 28px;
            color: white;
        }
        
        h2 {
            font-size: 30px;
            line-height: 30px;
            color: #D36228;
            text-align: center;
            margin-bottom: 10px;
        }
        
        #header {
            margin: 0px 100px 0px 100px;
        }
        
        #top-header {
            color: #1DA1F2;
            margin: 0px;
            padding: 0px;
            font-size: 50px;
        }
        
        #bottom-header {
            margin: 0px;
            padding: 0px;
            font-size: 30px;
        }
        
        #intro {
            margin-top: 20px;
            padding: 20px 200px 20px 200px;
        }
        
        #arrow {
            width: 100px;
            height: 100px;
        }
        
        #text-processing-example {
            display: flex;
            justify-content: center;
            margin: 20px;
            align-items: center;
        }
        
        #text-processing-example p {
            width: 400px;
            margin: 20px;
            background-color: #212E39;
            padding: 20px;
            border: 1px #37444C;
            border-style: solid;
            border-radius: 20px;
        }
        
        #trump_talking {
            width: 500px;
            position: absolute;
            left: -50px;
            top: 1000px;
            z-index: -1;
        }
        
        #bubble-chart {
            position: absolute;
            left: 500;
            top: 900px;
        }
        
        #speech-bub {
            position: absolute;
            width: 1060;
            height: 430;
            left: 330;
            top: 40;
            z-index: -1;
            opacity: .4;
        }
        
        #slider-labels {
            margin-top: -1px;
            z-index: -1;
        }
    </style>
</head>

<body>
    <div id="header">
        <h1 id="top-header">Donald Trump's Tweets</h1>
        <h1 id="bottom-header">Before and During Presidency</h1>
    </div>
    <div id="intro">
        <h2>What is on Donald Trump's Mind?</h2>
        <p>
            Donald Trump is many things: a business man, a television personality, an avid Twitter user, and the 45th President of the United States. Because of the complexity of his character, many have taken to Trump's Twitter account to gain insight to the intricate
            mechanisms of his mind. And like many others, we too were curious to understand what it was like in the life of the 45th President of the United States.
            <p>
                <p>
                    For this article we have processed all 36,307 tweets Trump has posted from 2009 (3 years after Twitter was founded) to 2018. Keeping in mind, that to reach this number of tweets, Trump had to have created about 11 tweets a day, everyday, for 9 years...that's
                    a lot of thoughts!
                </p>
                <p>
                    So, we analyzed these tweets through three visualizations all detailing Trump's thought processes and activities during those 9 years. Because Trump's tweets have been analyzed extensively by many others, our team decided that we wanted to highlight specifically
                    the types of topics Trump thought about before presidency and during presidency.
                </p>
                <p> To do this, we took a dataset gathered via the Twitter API and processed them using the
                    <a href="https://www.nltk.org/">'NLTK' natural language processing toolkit.</a> This tool allowed our team to preprocess Trump's tweets and extract the core topics discussed per each tweet. Below you can see how we processed Trump's
                    first-ever tweet.
                </p>
                <div id="text-processing-example">
                    <p>"Be sure to tune in and watch Donald Trump on Late Night with David Letterman as he presents the Top Ten List tonight!"</p>
                    <img src="right-arrow.png" alt="arrow" id="arrow">
                    <p>["sure", "tune", "watch", "donald", "trump", "late", "night", "david", "letterman", "presents", "top", "ten", "list", "tonight"]</p>
                </div>
    </div>
    <div class="section">
        <h2>Trumps Favorite Topics</h2>
        <p>
            We have included a bubble chart of the most popular words of all time that Donald Trump has tweeted. Hover over each bubble to see his most favorited tweet that uses that word from before and during his presidency. The words included in this chart are
            the words that he said more than 500 times over all time. The radius reflects the frequency of his use of each word. The five most frequent words Trump says are: Great, Trump, Thank, President, Obama.
        </p>
    </div>
    <div>
        <img id="trump_talking" src="IMG_0109.PNG" alt="Trump Talking">
        <svg id="bubble-chart"></svg>
        <img id="speech-bub" src="SpeechBub.png" alt="Speech Bubble Drawing">
    </div>
    <div id="tweet-contain">
        <div class="tweet-examples">
            <div id="tweet-example-before" class="tweet-example"></div>
            <div id="tweet-example-after" class="tweet-example"></div>
        </div>
    </div>
    <!-- code taken from here: https://codepen.io/MinzCode/pen/MWKgyqb -->
    <div id="input-slider">
        <div class="middle">
            <div class="multi-range-slider">
                <input type="range" id="input-left" min="0" max="115" value="0">
                <input type="range" id="input-right" min="0" max="115" value="115">
                <div class="slider">
                    <div class="track"></div>
                    <div class="range"></div>
                    <div class="thumb left"></div>
                    <div class="thumb right"></div>
                </div>
            </div>
            <svg id="slider-labels"></svg>
        </div>
    </div>
    <div id="line-chart-div">
        <svg id="line-chart-yaxis"></svg>
        <svg id="line-chart"></svg>
    </div>
    <div class="section">
        <p id="analysis2">
            Here is an analysis on the line graph. Bind a behavior to nodes to allow interactive dragging, either using the mouse or touch. Use this in conjunction with the call operator on the nodes; for example, say node.call(force.drag) on initialization. The
            drag event sets the fixed attribute of nodes on mouseover, such that as soon as the mouse is over a node, it stops moving. Fixing on mouseover, rather than on mousedown, makes it easier to catch moving nodes. When a mousedown event is received,
            and on each subsequent mousemove until mouseup, the node center is set to the current mouse position. In addition, each mousemove triggers a resume of the force layout, reheating the simulation. If you want dragged nodes to remain fixed after
            dragging, set the fixed attribute to true on dragstart, as in the sticky force layout example.
        </p>
    </div>
    <h2>Tweeting Around the Clock</h2>
    <div id="radial-chart-div">
        <h3>
            <span>Pre-Presidency</span>
            <span>During Presidency</span>
        </h3>
        <svg id="radial" width="700" height="800"></svg>
        <svg id="radial2" width="700" height="800"></svg>
    </div>
    <script>
        ////////////////////////////////////////////////////////SETTING UP TWITTER INTEGRATION//////////////////////////////////////////////////
        //https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-javascript-factory-function  

        window.twttr = (function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0],
                t = window.twttr || {};
            if (d.getElementById(id)) return t;
            js = d.createElement(s);
            js.id = id;
            js.src = "https://platform.twitter.com/widgets.js";
            fjs.parentNode.insertBefore(js, fjs);

            t._e = [];
            t.ready = function(f) {
                t._e.push(f);
            };

            return t;
        }(document, "script", "twitter-wjs"));

        ////////////////////////////////////////////////////////CREATING BUBBLE CHART//////////////////////////////////////////////////
        // used https://bl.ocks.org/officeofjane/a70f4b44013d06b9c0a973f163d8ab7a as a reference
        const load_network_graph = async() => {

            //define variables
            const rawData = await d3.csv('processed_tweets/bubble/Bubble_Chart_Data.csv');
            const width = 1100;
            const height = 550;
            const center = {
                "x": width / 2,
                'y': height / 2
            };
            let svg = null;
            let bubbles = null;
            let labels = null;
            let nodes = [];

            //define forces
            function charge(d) {
                return Math.pow(d.radius, 2.0) * 0.03
            }
            var simulation = d3.forceSimulation(nodes)
                .force('charge', d3.forceManyBody().strength(charge))
                .force('center', d3.forceCenter(width / 2, height / 2))
                .on('tick', ticked)
                .force('collision', d3.forceCollide().radius(function(d) {
                    return d.radius
                }))
                .force('y', d3.forceY().strength(.08).y(function(d) {
                    return 0;
                }))
            simulation.stop();

            //define color scale
            var fillColor = d3.scaleLinear()
                .domain([500, 1000, 2000, 5000])
                .range(['#D6EFFF', "#A6DBFC", "#75C6F8", "#1DA1F2"])
                .clamp(true)
                .interpolate(d3.interpolateHcl);

            //create bubbles
            function createNodes() {
                const maxSize = d3.max(rawData, d => +d.value);
                const radiusScale = d3.scaleSqrt()
                    .domain([0, maxSize])
                    .range([0, 70])
                const myNodes = rawData.map(d => ({
                    name: d.name,
                    value: d.value,
                    radius: radiusScale(+d.value),
                    size: +d.value,
                    x: Math.random() * 900,
                    y: Math.random() * 800
                }))

                return myNodes;
            }
            createNodes();


            //append circles and labels to svg
            let chart = function chart(rawData) {
                nodes = createNodes(rawData);

                svg = d3.select('#bubble-chart')
                    .attr('width', width)
                    .attr('height', height)

                const elements = svg.selectAll('.bubble')
                    .data(nodes, d => d.name)
                    .enter()
                    .append('g')

                bubbles = elements
                    .append('circle')
                    .classed('bubble', true)
                    .attr('r', d => d.radius)
                    .attr('fill', d => fillColor(d.value))
                    .on("mouseover", bubbleMouseover)
                    .on("mouseout", bubbleMouseout)
                    .attr("name", d => d.name)

                labels = elements
                    .append('text')
                    .attr('dy', '.3em')
                    .style('text-anchor', 'middle')
                    .style('font-size', 12)
                    .style('font-weight', 'bold')
                    .text(d => d.name.charAt(0).toUpperCase() + d.name.slice(1))

                //run animation
                simulation.nodes(nodes)
                    .on('tick', ticked)
                    .restart();
            }

            function ticked() {
                bubbles
                    .attr('cx', d => d.x)
                    .attr('cy', d => d.y)

                labels
                    .attr('x', d => d.x)
                    .attr('y', d => d.y)
            }
            chart();

            //hover functionality: show tweets of topic
            function bubbleMouseover() {
                let hoverData = d3.json('processed_tweets/bubble/Bubble_Chart_Hover_Data.json').then((hoverData) => {
                    bubble = d3.select(this)
                    bubble.attr("stroke-width", 4).attr("stroke", "#000")
                    let singleData = hoverData.filter(function(datum) {
                        return datum.name === bubble.attr("name");
                    })

                    //get before and after tweets containing topic
                    beforeTweet = singleData[0].tweet_before.id_str;
                    afterTweet = singleData[0].tweet_after.id_str;

                    //clear any existing tweets
                    d3.select("#tweet-example-before")
                        .text("")
                        .text("")
                    d3.select("#tweet-example-after")
                        .text("")

                    //dyanmically load embedded tweet
                    //https://developer.twitter.com/en/docs/twitter-for-websites/embedded-tweets/guides/embedded-tweet-javascript-factory-function
                    twttr.widgets.createTweet(
                        beforeTweet,
                        document.getElementById('tweet-example-before'), {
                            theme: 'dark',
                            align: 'center',
                            cards: 'hidden',
                            conversation: 'none'
                        }
                    );

                    twttr.widgets.createTweet(
                        afterTweet,
                        document.getElementById('tweet-example-after'), {
                            theme: 'dark',
                            align: 'center',
                            cards: 'hidden',
                            conversation: 'none'
                        }
                    );

                }, (error) => {
                    console.log(error);
                });
            }

            function bubbleMouseout() {
                bubble = d3.select(this)
                bubble.attr("stroke", "none")

            }
        }
        load_network_graph();


        ////////////////////////////////////////////////////////CREATING LINE CHART/////////////////////////////////////////////////////
        // used this site to add xAxis manipulation: https://www.d3-graph-gallery.com/graph/line_change_data.html
        // used this site to add hover interactions: https://observablehq.com/@d3/multi-line-chart
        const load_line_graph = async() => {


            //define variables and chart
            const margin = {
                top: 50,
                right: 60,
                bottom: 50,
                left: 60
            };
            const width = 1000
            const height = 500
            svg = d3.select('#line-chart')
            svg.attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            linechart = svg.append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


            const data = await d3.json('processed_tweets/timeline/timeline_data.json');

            //found this value while creating the dataset
            let maxOccurrences = 200;

            //creating initial date range for xAxis using the first and last items in my data.dates array
            let minDate = new Date(data.dates[0])
            let maxDate = new Date(data.dates[115]);

            //adding labels to double input slider here
            sliderLbls = d3.selectAll("#slider-labels")
                .attr('width', 500)
                .attr('height', 50)

            var sliderScale = d3.scaleTime().domain([new Date(data.dates[0]), new Date(data.dates[115])]).range([20, 480])
            sliderLbls.append("g")
                .attr("class", "line-graph-axis")
                .attr("transform", "translate(" + 0 + "," + 0 + ")")
                .call(d3.axisBottom(sliderScale));
            sliderLbls.append("text")
                // .attr("transform", "rotate(-90)")
                .attr("y", 30)
                .attr("x", 250)
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .style("fill", "white")
                .text("Change the Date Range");

            //initialize Xaxis
            var scaleX = d3.scaleTime().range([-margin.left, width + margin.right - 1]);
            var xAxis = d3.axisBottom(scaleX)
            svg.append("g")
                .attr("class", "line-graph-axis")
                .attr("id", "x-axis")
                .attr("transform", "translate(" + margin.left + "," + height + ")")
            svg.append("text")
                .attr("transform",
                    "translate(" + ((width / 2) + margin.left) + " ," +
                    (height + margin.top + 10) + ")")
                .style("text-anchor", "middle")
                .style("fill", "white")
                .text("Date");

            //adding Yaxis to seperate svg
            //this was done to mitigate some styling issues resulting from timeline expansion
            yAxisSvg = d3.selectAll('#line-chart-yaxis')
                .attr("width", 100)
            var scaleY = d3.scaleLinear()
                .domain([0, maxOccurrences])
                .range([height - margin.bottom, 0]);
            var yAxis = yAxisSvg.append("g")
                .attr("class", "line-graph-axis")
                .attr("transform", "translate(" + 99 + "," + margin.top + ")")
                .call(d3.axisLeft(scaleY));
            yAxisSvg.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 30)
                .attr("x", 0 - (height / 2))
                .attr("dy", "1em")
                .style("text-anchor", "middle")
                .style("fill", "white")
                .text("Number of Occurrences");



            ///////////////////////////////////////////////START: UPDATE TIMELINE BASED ON SLIDER/////////////////////////////////////////////////////
            function update_chart(minIndex, maxIndex) {

                //get input values
                minIndex = document.getElementById("input-left").value;
                maxIndex = document.getElementById("input-right").value;

                //create scale based on input values
                scaleX.domain([new Date(data.dates[minIndex]), new Date(data.dates[maxIndex])])

                //draw x axis
                d3.selectAll("#x-axis").transition()
                    .duration(500)
                    .call(xAxis)


                //draw graph given defined xAxis
                line = d3.line()
                    .defined(d => !isNaN(d))
                    .x((d, i) => scaleX(new Date(data.dates[i])))
                    .y(d => scaleY(d))


                const path = linechart
                    .selectAll("path")
                    .data(data.series)
                    .join("path")
                    .attr("d", d => line(d.values))
                    .attr("fill", "none")
                    .attr("stroke", "#1DA1F2")
                    .attr("class", "lines")
                    .attr("stroke-width", 4)
                    .attr("stroke-linejoin", "round")
                    .attr("stroke-linecap", "round")

                //add line to indicate presidency
                //delete old line everytime chart updates
                d3.selectAll("#pres-annotation").remove();
                d3.selectAll("#annotation-lbl").remove();
                //redraw line
                const annotation = linechart.append("line")
                    .attr('id', 'pres-annotation')
                    .attr("x1", scaleX(new Date(2016, 11, 8)))
                    .attr("y1", 0)
                    .attr("x2", scaleX(new Date(2016, 11, 8)))
                    .attr("y2", height - margin.bottom)
                    .attr("stroke-dasharray", "5,5")
                    .attr("stroke", "white")
                    .attr("stroke-width", 1)

                linechart.append('text')
                    .attr("y", 0)
                    .attr("id", "annotation-lbl")
                    .attr("x", scaleX(new Date(2016, 11, 8)) + 5)
                    .attr("dy", "1em")
                    .style("text-anchor", "left")
                    .style("fill", "white")
                    .text('Elected President')


                //adding hover function to viz here
                svg.call(hover, path);

                ////////////////////////////////////START: HOVER TIMELINE INTERACTION ///////////////////////////
                //https://observablehq.com/@d3/multi-line-chart
                function hover(linechart, path) {

                    //add interaction functions to path
                    path
                        .on("mousemove", moved)
                        .on("mouseover", entered)
                        .on("mouseout", left);

                    //delete existing dots
                    d3.selectAll('#dot').remove();

                    //initialize position dot
                    const dot = linechart.append("g")
                        .attr('id', 'dot')
                        .attr("display", "none");
                    dot.append("circle")
                        .attr("r", 4)
                        .attr("fill", "white")
                    dot.append("text")
                        .attr("font-family", "sans-serif")
                        .attr("font-size", 20)
                        .attr("fill", "white")
                        .attr("text-anchor", "middle")
                        .attr("y", -12);

                    //function if moving mouse on a path
                    function moved(event) {

                        //get mouse position
                        var coordinates = d3.mouse(this);
                        var xm = scaleX.invert(coordinates[0]);
                        var ym = scaleY.invert(coordinates[1]);

                        //find nearest month to mouse
                        let i = null;
                        data.dates.forEach((d, idx) => {
                            e = new Date(d)
                            if (e.getMonth() == xm.getMonth() && e.getYear() == xm.getYear()) {
                                i = idx;
                            }
                        })

                        //get nearest line given month
                        let s = null;
                        let distance = Infinity;
                        data.series.forEach((d) => {
                            if (Math.abs(d.values[i] - ym) < distance) {
                                distance = Math.abs(d.values[i] - ym)
                                s = d;
                            }
                        })

                        //given nearest line, color paths accordingly, highlight and lowlight
                        path.attr("stroke", d => d !== s ? "#212E39" : "#1DA1F2").filter(d => d === s).raise();

                        //add dot to location and label
                        dot.attr("transform", `translate(${margin.left+scaleX(new Date(data.dates[i]))},${margin.top+scaleY(s.values[i])})`);
                        dot.select("text").text(s.name.charAt(0).toUpperCase() + s.name.slice(1) + ", " + s.values[i] + " times");
                    }

                    function entered() {
                        dot.attr("display", null);
                    }

                    function left() {
                        path.attr("stroke", "#1DA1F2");
                        dot.attr("display", "none");
                    }
                }
                ////////////////////////////////////END: HOVER TIMELINE INTERACTION ///////////////////////////
            }


            //call the first chart with entire xaxis values
            update_chart(0, 115)

            ///////////////////////////////////////////////END: UPDATE TIMELINE BASED ON SLIDER/////////////////////////////////////////////////////

            ///////////////////////////////////////////////HANDLE DOUBLE ENDED SLIDER/////////////////////////////////////////////////////
            //code taken from here: https://codepen.io/MinzCode/pen/MWKgyqb
            var minIndex
            var maxIndex
            var inputLeft = document.getElementById("input-left");
            var inputRight = document.getElementById("input-right");

            var thumbLeft = document.querySelector(".slider > .thumb.left");
            var thumbRight = document.querySelector(".slider > .thumb.right");
            var range = document.querySelector(".slider > .range");

            function setLeftValue() {
                var _this = inputLeft,
                    min = parseInt(_this.min),
                    max = parseInt(_this.max);

                _this.value = Math.min(parseInt(_this.value), parseInt(inputRight.value) - 1);
                minIndex = _this.value;
                var percent = ((_this.value - min) / (max - min)) * 100;

                thumbLeft.style.left = percent + "%";
                range.style.left = percent + "%";
            }
            setLeftValue();

            function setRightValue() {
                var _this = inputRight,
                    min = parseInt(_this.min),
                    max = parseInt(_this.max);

                _this.value = Math.max(parseInt(_this.value), parseInt(inputLeft.value) + 1);
                maxIndex = _this.value;

                var percent = ((_this.value - min) / (max - min)) * 100;

                thumbRight.style.right = (100 - percent) + "%";
                range.style.right = (100 - percent) + "%";
            }
            setRightValue();

            inputLeft.addEventListener("input", setLeftValue);
            inputRight.addEventListener("input", setRightValue);

            //every time the element is altered, redraw line chart
            inputRight.addEventListener("input", update_chart);
            inputLeft.addEventListener("input", update_chart);

            inputLeft.addEventListener("mouseover", function() {
                thumbLeft.classList.add("hover");
            });
            inputLeft.addEventListener("mouseout", function() {
                thumbLeft.classList.remove("hover");
            });
            inputLeft.addEventListener("mousedown", function() {
                thumbLeft.classList.add("active");
            });
            inputLeft.addEventListener("mouseup", function() {
                thumbLeft.classList.remove("active");
            });

            inputRight.addEventListener("mouseover", function() {
                thumbRight.classList.add("hover");
            });
            inputRight.addEventListener("mouseout", function() {
                thumbRight.classList.remove("hover");
            });
            inputRight.addEventListener("mousedown", function() {
                thumbRight.classList.add("active");
            });
            inputRight.addEventListener("mouseup", function() {
                thumbRight.classList.remove("active");
            });
        }
        load_line_graph();



        ///////////////////////////////////////////////////////CREATING RADIAL CHART/////////////////////////////////////////////////////
        //TO DO: cite resources
        const drawRadial = async() => {

            const radialsvg = d3.select("#radial");
            const radialsvg2 = d3.select("#radial2");

            const width = radialsvg.attr("width");
            const height = radialsvg.attr("height");

            const radialChart = radialsvg.append("g")
                .attr("transform", "translate(" + 400 + "," + 300 + ")");
            const radialChart2 = radialsvg2.append("g")
                .attr("transform", "translate(" + 300 + "," + 300 + ")");


            const tweets = await d3.json("processed_tweets/hours/before.json");
            const tweets2 = await d3.json("processed_tweets/hours/after.json");

            let counts = [];
            let counts2 = [];
            let hours = [];

            tweets.forEach(d => {
                counts.push(d["frequency"]);
            })

            tweets2.forEach(d => {
                counts2.push(d["frequency"]);
            })

            dataExtent = d3.extent(counts);
            dataExtent2 = d3.extent(counts2);

            var innerRadius = 180
            var outerRadius = Math.min(width, height) / 2;

            // Scales
            var x = d3.scaleBand()
                .range([0, 2 * Math.PI])
                .align(0)
                .domain(tweets.map(d => {
                    return d.hour;
                })); //list of hours

            var y = d3.scaleRadial()
                .range([innerRadius, outerRadius])
                .domain(dataExtent);

            var z = d3.scaleRadial()
                .range([innerRadius, outerRadius])
                .domain(dataExtent2);

            var bars = radialChart.append("g")
                .selectAll("path")
                .data(tweets)
                .enter()
                .append("path")
                .attr("fill", "#1DA1F2")
                .attr("d", d3.arc()
                    .innerRadius(innerRadius)
                    .outerRadius(d => {
                        return y(d.frequency);
                    })
                    .startAngle(d => {
                        return x(d.hour);
                    })
                    .endAngle(d => {
                        return x(d.hour) + x.bandwidth();
                    })
                    .padAngle(0.05)
                    .padRadius(innerRadius))

            //bar labels
            let labelWidth = 90;
            let labelHeight = 50;

            let labelBox = radialChart.append("g")
                .attr("id", "labelBox")
                .attr("visibility", "hidden")
                .attr("width", labelWidth)
                .attr("height", labelHeight)
            labelBox.append("rect")
                .attr("fill", "white")
                .attr("opacity", 0.9)
                .attr("width", labelWidth)
                .attr("height", labelHeight)

            labelBox.append("text")
                .attr("class", "text")
                .attr("id", "frequency")
                .attr("fill", "black")
                .attr("x", 8)
                .attr("y", 16)
                .attr("font-size", 16)
                .attr("text-anchor", "start")
                .attr("alignment-baseline", "text-before-edge")
                .attr("font-weight", "bold");

            bars.on("mouseover", function() {
                let current = d3.select(this);

                current.transition().duration(200)
                    .attr("fill", "white");

                currentdata = current.datum();
                d3.select("#labelBox").attr("visibility", "visible")
                    .attr("text-anchor", d => {
                        return (x(currentdata.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "end" : "start";
                    })
                    .attr("transform", d => {
                        return "rotate(" + ((x(currentdata.hour) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")" + "translate(" + (outerRadius / 1.5 + 10) + ",0)";
                    })

                currentLabel = currentdata.frequency + " tweets";
                d3.select("#frequency").text(currentLabel)
                    .attr("transform", d => {
                        return (x(currentdata.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "rotate(180)" + "translate(-88,-50)" : "rotate(0)";
                    });
            })

            bars.on("mouseout", function() {
                let current = d3.select(this);

                current.transition().duration(200)
                    .attr("fill", "#1DA1F2");

                currentdata = current.datum();
                d3.select("#labelBox").attr("visibility", "hidden");
                d3.select("#frequency").text("");
            })

            var bars2 = radialChart2.append("g")
                .selectAll("path")
                .data(tweets2)
                .enter()
                .append("path")
                .attr("fill", "#1DA1F2")
                .attr("d", d3.arc()
                    .innerRadius(innerRadius)
                    .outerRadius(d => {
                        return y(d.frequency);
                    })
                    .startAngle(d => {
                        return x(d.hour);
                    })
                    .endAngle(d => {
                        return x(d.hour) + x.bandwidth();
                    })
                    .padAngle(0.05)
                    .padRadius(innerRadius))

            //bar labels
            let labelBox2 = radialChart2.append("g")
                .attr("id", "labelBox2")
                .attr("visibility", "hidden")
                .attr("width", labelWidth)
                .attr("height", labelHeight)
            labelBox2.append("rect")
                .attr("fill", "white")
                .attr("opacity", 0.9)
                .attr("width", labelWidth)
                .attr("height", labelHeight)

            labelBox2.append("text")
                .attr("class", "text")
                .attr("id", "frequency2")
                .attr("fill", "black")
                .attr("x", 8)
                .attr("y", 16)
                .attr("font-size", 16)
                .attr("text-anchor", "start")
                .attr("alignment-baseline", "text-before-edge")
                .attr("font-weight", "bold");

            bars2.on("mouseover", function() {
                let current = d3.select(this);

                current.transition().duration(200)
                    .attr("fill", "white");

                currentdata = current.datum();
                d3.select("#labelBox2").attr("visibility", "visible")
                    .attr("text-anchor", d => {
                        return (x(currentdata.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "end" : "start";
                    })
                    .attr("transform", d => {
                        return "rotate(" + ((x(currentdata.hour) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")" + "translate(" + (outerRadius / 1.5 + 10) + ",0)";
                    })

                currentLabel = currentdata.frequency + " tweets";
                d3.select("#frequency2").text(currentLabel)
                    .attr("transform", d => {
                        return (x(currentdata.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "rotate(180)" + "translate(-88,-50)" : "rotate(0)";
                    });
            })

            bars2.on("mouseout", function() {
                let current = d3.select(this);

                current.transition().duration(200)
                    .attr("fill", "#1DA1F2");

                currentdata = current.datum();
                d3.select("#labelBox2").attr("visibility", "hidden");
                d3.select("#frequency2").text("");
            })


            radialChart.append("g")
                .selectAll("g")
                .data(tweets)
                .enter()
                .append("g")
                .attr("text-anchor", d => {
                    return (x(d.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "end" : "start";
                })
                .attr("transform", d => {
                    if (d.time == "12AM" || d.time == "12PM") {
                        return "rotate(" + ((x(d.hour) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")" + "translate(" + (innerRadius - 60) + ",0)";
                    } else {
                        return "rotate(" + ((x(d.hour) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")" + "translate(" + (innerRadius - 30) + ",0)";
                    }
                })
                .append("text")
                .text(d => {
                    return (d.time)
                })
                .attr("transform", d => {
                    return (x(d.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "rotate(180)" : "rotate(0)";
                })
                .style("font-size", "20px")
                .style("fill", "white")
                .attr("alignment-baseline", "middle");

            radialChart2.append("g")
                .selectAll("g")
                .data(tweets2)
                .enter()
                .append("g")
                .attr("text-anchor", d => {
                    return (x(d.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "end" : "start";
                })
                .attr("transform", d => {
                    if (d.time == "12AM" || d.time == "12PM") {
                        return "rotate(" + ((x(d.hour) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")" + "translate(" + (innerRadius - 70) + ",0)";
                    } else {
                        return "rotate(" + ((x(d.hour) + x.bandwidth() / 2) * 180 / Math.PI - 90) + ")" + "translate(" + (innerRadius - 30) + ",0)";
                    }
                })
                .append("text")
                .text(d => {
                    return (d.time)
                })
                .attr("transform", d => {
                    return (x(d.hour) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? "rotate(180)" : "rotate(0)";
                })
                .style("font-size", "20px")
                .style("fill", "white")
                .attr("alignment-baseline", "middle");
        }
        drawRadial();
    </script>
</body>

</html>