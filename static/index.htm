<html>

<head>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <script src="https://unpkg.com/d3-sankey@0"></script>


  <style>
    body {
      background-color: #15202B;
      margin: 50px 0px 100px 0px;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p {
      color: white;
      font-family: arial;
    }

    #header {
      height: 500px;
      margin: 0px 100px 0px 100px;
    }

    #trump_talking {
      width: 400px;
      position: absolute;
      left: 50px;
      top: 120px;
      z-index: -1;
    }

    #bubble-chart {
      position: absolute;
      left: 400;
      top: 10;
    }

    #speech-bub {
      position: absolute;
      width: 950;
      height: 520;
      left: 390;
      top: 20;
      z-index: -1;
      opacity: .9;
    }

    #title2 {
      text-align: center;
    }

    .section {
      background-color: #212E39;
      padding: 20px 200px 20px 200px;
      border: 1px #37444C;
      border-style: solid none;
    }

    #analysis2 {
      /* margin: 60px 0px 20px 200px; */
      width: 50%;
    }

    .bubble:hover {
      cursor: pointer;
    }

    .tweet-contain {
      display: block;
      width: 100%;
      height: 300px;
      background-color: #475;
      overflow: scroll;
    }

    .tweet-examples {
      width: 100%;
      /* margin: 100px; */
      display: flex;
      justify-content: center;
      height: 300px;

    }

    .tweet-example {
      width: 40%;
      border: 1px #37444C;
      border-radius: 5px;
      border-style: solid;
      padding: 10px;
      margin: 10px;
      background-color: #1B2732;
    }

    #analysis2-div {
      text-align: left;
      display: flex;
    }

    #analysis2 {
      width: 100%;
    }

    .line-graph-axis {
      color: white;
      z-index: -1;
    }

    #line-chart-div {
      text-align: center;
    }

    #top-header{
      color: #1DA1F2;
      margin: 0px;
      padding: 0px;
      font-size: 50px;
    }
    #bottom-header {
      margin: 0px;
      padding: 0px;
      font-size: 30px;
    }
  </style>
</head>

<body>
  <div id="header">
    <h1 id="top-header">Donald Trump's Tweets</h1><h1 id="bottom-header">Before and During Presidency</h1>
  </div>
  <div>
    <img id="trump_talking" src="IMG_0109.PNG" alt="Trump Talking" />
    <svg id="bubble-chart"></svg>
    <img id="speech-bub" src="SpeechBub.png" alt="Speech Bubble Drawing" />
  </div>
  <div id="tweet-contain">
    <div class="tweet-examples">
      <div id="tweet-example-before" class="tweet-example">
        <h3 id="tweet-text-before"></h3>
        <div class="likes-comments">
          <p id="likes-before"></p>
        </div>
      </div>
      <div id="tweet-example-after" class="tweet-example">
        <h3 id="tweet-text-after"></h3>
        <div class="likes-comments">
          <p id="likes-after"></p>
        </div>
      </div>
    </div>
  </div>
  <div class="section">
    <h2 id="title2">What was on Donald Trump's Mind?</h2>
    <p>Enter analysis here on the above and below graphs. "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
      do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation
      ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit
      esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui
      officia deserunt mollit anim id est laborum."</p>
  </div>
  <div id="line-chart-div">
    <svg id="line-chart"></svg>
  </div>
  <div class="section">
    <p id="analysis2">
      Here is an analysis on the line graph. Bind a behavior to nodes to allow interactive dragging, either
      using
      the mouse or touch. Use this in conjunction with the call operator on the nodes; for example, say
      node.call(force.drag) on initialization. The drag event sets the fixed attribute of nodes on mouseover, such that
      as soon as the mouse is over a node, it stops moving. Fixing on mouseover, rather than on mousedown, makes it
      easier to catch moving nodes. When a mousedown event is received, and on each subsequent mousemove until mouseup,
      the node center is set to the current mouse position. In addition, each mousemove triggers a resume of the force
      layout, reheating the simulation. If you want dragged nodes to remain fixed after dragging, set the fixed
      attribute to true on dragstart, as in the sticky force layout example.
    </p>
  </div>
  <script>
    // preprocessing data occurred in /processed_tweets/Preprocessing Tweets without Stemming.ipynb
    // https://pythonhealthcare.org/2018/12/14/101-pre-processing-data-tokenization-stemming-and-removal-of-stop-words/
    //   const get_data = async () => {
    // //  using JavaScript to combine the json files
    //   let tweets1 = await d3.json('raw_tweets_data/condensed_2018.json')
    //   let tweets2 = await d3.json('raw_tweets_data/condensed_2017.json')
    //   let tweets3 = await d3.json('raw_tweets_data/condensed_2016.json')
    //   let tweets4 = await d3.json('raw_tweets_data/condensed_2015.json')
    //   let tweets5 = await d3.json('raw_tweets_data/condensed_2014.json')
    //   let tweets6 = await d3.json('raw_tweets_data/condensed_2013.json')
    //   let tweets7 = await d3.json('raw_tweets_data/condensed_2012.json')
    //   let tweets8 = await d3.json('raw_tweets_data/condensed_2011.json')
    //   let tweets9 = await d3.json('raw_tweets_data/condensed_2010.json')
    //   let tweets10 = await d3.json('raw_tweets_data/condensed_2009.json')

    //   finalObj = tweets1.concat(tweets2).concat(tweets3).concat(tweets4).concat(tweets5).concat(tweets6).concat(tweets7).concat(tweets8).concat(tweets9).concat(tweets10);
    //   beforePrez = tweets3.concat(tweets4).concat(tweets5).concat(tweets6).concat(tweets7).concat(tweets8).concat(tweets9).concat(tweets10);
    //   duringPrez = tweets1.concat(tweets2)
    //   // console.log(finalObj.length)
    //   // console.log(JSON.stringify(finalObj))
    //   console.log(JSON.stringify(beforePrez))
    //   console.log(JSON.stringify(duringPrez))
    //   }
    //   get_data();

    //drawing first graph
    const load_network_graph = async () => {


      // producing Bubble Chart Hover Data

      //   let tweets = await d3.json('processed_tweets/Processed_Tweets_Not_Stemmed.json');
      //   let keyword = await d3.csv('processed_tweets/Bubble_Chart_Data.csv');
      //   // console.log(tweets[1].token_meaningful)
      //   // console.log("abv")
      // let Bubble_Chart_Hover_Data = [];
      // keyword.forEach((key) => {
      //   let maxBefore = {};
      //   let maxLikesBefore = 0;
      //   let maxAfter = {};
      //   let maxLikesAfter = 0;
      //   tweets.forEach((d,i) => {
      //     if (d.token_meaningful.includes(key['name'])) {
      //       created_date = new Date(d.created_at)
      //       presidency = new Date(("November 8, 2016 00:00:00"))
      //       if (created_date <= presidency) {
      //         if (d.favorite_count >= maxLikesBefore) {
      //           maxLikesBefore = d.favorite_count
      //           maxBefore = d
      //         }
      //       } else {
      //         if (d.favorite_count >= maxLikesAfter) {
      //           maxLikesAfter = d.favorite_count
      //           maxAfter = d
      //         }
      //       }

      //     }
      //   })
      //   Bubble_Chart_Hover_Data.push({
      //     name: key['name'],
      //     tweet_before: maxBefore,
      //     tweet_after: maxAfter
      //   })
      //   // console.log("Before")
      //   // console.log(JSON.stringify(maxBefore))
      //   // console.log("After")
      //   // console.log(JSON.stringify(maxAfter))
      // })
      // console.log(JSON.stringify(Bubble_Chart_Hover_Data))
      //create a hashmap of all word occurrances, key = word, value = occurrances
      // word_occurr = new Map();
      // tweets.forEach((d) => {
      //   d.token_meaningful.forEach((word) => {
      //     if (word_occurr.has(word)) // if already exists then update count. 
      //       word_occurr.set(word, word_occurr.get(word) + 1);
      //     else
      //       word_occurr.set(word, 1)
      //   })
      // })

      // //ordering the hashmap based on value
      // //https://stackoverflow.com/questions/37982476/how-to-sort-a-map-by-value-in-javascript
      // word_occurr[Symbol.iterator] = function* () {
      //   yield* [...this.entries()].sort((a, b) => b[1] - a[1]);
      // }
      // ordered_words = [];
      // for (let [key, value] of word_occurr) {
      //   //shortening list to words occurring 500+ times
      //   if (value > 500) {
      //     ordered_words.push({ "name": key, "value": value })
      //   }
      // }
      // console.log(word_occurr)
      // console.log(ordered_words)

      //console.log(JSON.stringify(ordered_words))


      // var json = ordered_words
      // var fields = Object.keys(json[0])
      // var replacer = function (key, value) { return value === null ? '' : value }
      // var csv = json.map(function (row) {
      //   return fields.map(function (fieldName) {
      //     return JSON.stringify(row[fieldName], replacer)
      //   }).join(',')
      // })
      // csv.unshift(fields.join(',')) // add header column
      // csv = csv.join('\r\n');
      // console.log(csv)

      const rawData = await d3.csv('processed_tweets/Bubble_Chart_Data.csv');
      const width = 1050;
      const height = 550;

      //creating the bubble chart
      //https://bl.ocks.org/officeofjane/a70f4b44013d06b9c0a973f163d8ab7a


      const center = { "x": width / 2, 'y': height / 2 };

      let svg = null;
      let bubbles = null;
      let labels = null;
      let nodes = [];

      function charge(d) {
        return Math.pow(d.radius, 2.0) * 0.04
      }

      var simulation = d3.forceSimulation(nodes)
        .force('charge', d3.forceManyBody().strength(charge))
        .force('center', d3.forceCenter(width / 2, height / 2))
        .on('tick', ticked)
        .force('collision', d3.forceCollide().radius(function (d) {
          return d.radius
        }))
        .force('y', d3.forceY().strength(.03).y(function (d) {
          return 0;
        }))

      simulation.stop();

      var fillColor = d3.scaleLinear()
        .domain([500, 1000, 2000, 5000])
        .range(['#C8C8C8', '#808080', "#606060", "#484848"])
        .clamp(true)
        .interpolate(d3.interpolateHcl);

      function createNodes() {
        const maxSize = d3.max(rawData, d => +d.value);
        const radiusScale = d3.scaleSqrt()
          .domain([0, maxSize])
          .range([0, 70])

        const myNodes = rawData.map(d => ({
          name: d.name,
          value: d.value,
          radius: radiusScale(+d.value),
          size: +d.value,
          x: Math.random() * 900,
          y: Math.random() * 800
        }))

        return myNodes;
      }
      createNodes();

      let chart = function chart(rawData) {
        nodes = createNodes(rawData);

        svg = d3.select('#bubble-chart')
          .attr('width', width)
          .attr('height', height)

        const elements = svg.selectAll('.bubble')
          .data(nodes, d => d.name)
          .enter()
          .append('g')

        bubbles = elements
          .append('circle')
          .classed('bubble', true)
          .attr('r', d => d.radius)
          .attr('fill', d => fillColor(d.value))
          .on("mouseover", bubbleMouseover)
          .on("mouseout", bubbleMouseout)
          .attr("name", d => d.name)

        labels = elements
          .append('text')
          .attr('dy', '.3em')
          .style('text-anchor', 'middle')
          .style('font-size', 12)
          .style('font-weight', 'bold')
          .text(d => d.name.charAt(0).toUpperCase() + d.name.slice(1))


        simulation.nodes(nodes)
          .on('tick', ticked)
          .restart();
      }

      function ticked() {
        bubbles
          .attr('cx', d => d.x)
          .attr('cy', d => d.y)

        labels
          .attr('x', d => d.x)
          .attr('y', d => d.y)
      }

      chart();



      function bubbleMouseover() {
        let hoverData = d3.json('processed_tweets/Bubble_Chart_Hover_Data.json').then((hoverData) => {
          bubble = d3.select(this)
          bubble.attr("stroke-width", 5).attr("stroke", "#1DA1F2")

          let data = hoverData.filter(function (datum) { return datum.name === bubble.attr("name"); })

          beforeTweet = data[0].tweet_before;
          afterTweet = data[0].tweet_after;


          // console.log(beforeTweet)
          d3.select("#tweet-text-before")
            .text(beforeTweet.text)
          d3.select("#likes-before")
            .text(beforeTweet.favorite_count)
          d3.select("#tweet-text-after")
            .text(afterTweet.text)
          d3.select("#likes-after")
            .text(afterTweet.favorite_count)


        }, (error) => {
          console.log(error);
        });
      }


      function bubbleMouseout() {
        bubble = d3.select(this)
        bubble.attr("stroke", "none")

        d3.select("#tweet-text-before")
          .text("")
        d3.select("#likes-before")
          .text("")
        d3.select("#tweet-text-after")
          .text("")
        d3.select("#likes-after")
          .text("")
      }
    }
    load_network_graph();

    const load_line_graph = async () => {
      // console.log("linechart data")

      //getting data for line charts
      //top 5 words
      // great",5052
      // "trump",4917
      // "thank",4392
      // "president",2303
      // "obama",2276


      // let great = [];
      // let trump = [];
      // let thank = [];
      // let president = [];
      // let obama = [];
      // let minDate1 = new Date(2025, 11, 17);
      // let maxDate1 = new Date(1990, 11, 17);

      // const rawData = await d3.json('processed_tweets/Processed_Tweets_Not_Stemmed.json');

      // console.log(rawData)
      // rawData.forEach((d, i) => {
      //   date = new Date(d.created_at)
      //   if (date >= maxDate1) {
      //     maxDate1 = date
      //   } else if (date <= minDate1) {
      //     minDate1 = date
      //   }
      // if (d.token_meaningful.includes("great")) {
      //   great.push(d)
      // } else if (d.token_meaningful.includes("trump")) {
      //   trump.push(d)
      // } else if (d.token_meaningful.includes("thank")) {
      //   thank.push(d)
      // } else if (d.token_meaningful.includes("president")) {
      //   president.push(d)
      // } else if (d.token_meaningful.includes("obama")) {
      //   obama.push(d)
      // }
      // })
      // arrays of each
      //  console.log(great.length, trump.length, thank.length, president.length, obama.length)
      // console.log(minDate, maxDate)
      // min = Mon May 04 2009 14:54:25 GMT-0400 (Eastern Daylight Time) 
      // max = Mon Dec 31 2018 18:53:06 GMT-0500 (Eastern Standard Time)
      // now count by month
      // var now = new Date(maxDate1);
      // var months = [];
      // for (var d = new Date(minDate1); d <= now; d.setMonth(d.getMonth() + 1)) {
      //   months.push(new Date(d));
      // }

      // console.log(months)

      // let great_data = [];
      // let trump_data = [];
      // let thank_data = [];
      // let president_data = [];
      // let obama_data = []

      //summing occurrences and likes per month per topic

      // months.forEach((d, i) => {
      //   let great_counter = 0;
      //   let trump_counter = 0;
      //   let than_counter = 0;
      //   let president_counter = 0;
      //   let obama_counter = 0
      //   let like_counter = 0;
      //   let word_counter = 0;
      //   obama.forEach((e, j) => {
      //     date = new Date(e.created_at)
      //     if (date.getMonth() == d.getMonth() && date.getYear() == d.getYear()) {
      //       word_counter += 1;
      //       like_counter += e.favorite_count;
      //     }
      //   })
      //   obama_data.push({
      //     date: d,
      //     occurrences: word_counter,
      //     likes: like_counter
      //   })
      // })
      // console.log(JSON.stringify(obama_data))



      const margin = { top: 50, right: 60, bottom: 50, left: 60 };
      const width = 1000
      const height = 500


      svg = d3.select('#line-chart')

      svg.attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)

      linechart = svg.append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      const great_data_json = await d3.json('processed_tweets/timeline/great_timeline.json');
      const trump_data_json = await d3.json('processed_tweets/timeline/trump_timeline.json');
      const thank_data_json = await d3.json('processed_tweets/timeline/thank_timeline.json');
      const president_data_json = await d3.json('processed_tweets/timeline/president_timeline.json');
      const obama_data_json = await d3.json('processed_tweets/timeline/obama_timeline.json');

      //Find the max value between all datasets
      // maxValue = 0;
      // trump_data_json.forEach((d)=> {
      //   if (d.occurrences >= maxValue) {
      //     maxValue = d.occurrences
      //   }
      // })
      // console.log(maxValue)
      //max occurrences is 200!
      let maxOccurrences = 200;

      let minDate = new Date(2009, 04, 4)
      let maxDate = new Date(2018, 11, 4);

      var scaleX = d3.scaleTime()
        .domain([minDate, maxDate])
        .range([0, width]);

      svg.append("g")
        .attr("class", "line-graph-axis")
        .attr("transform", "translate(" + margin.left + "," + height + ")")
        .call(d3.axisBottom(scaleX))

      var scaleY = d3.scaleLinear()
        .domain([0, maxOccurrences])
        .range([height - margin.bottom, margin.top]);

      svg.append("g")
        .attr("class", "line-graph-axis")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        .call(d3.axisLeft(scaleY));
      //adding "great" line

      //adding great
      linechart.append("path")
        .datum(trump_data_json)
        .attr("fill", "none")
        .attr("stroke", "#1DA1F2")
        .attr("stroke-width", 1.5)
        .attr("d", d3.line()
          .x(function (d) { return scaleX((new Date(d.date))) })
          .y(function (d) { return scaleY(d.occurrences) })
        )

      //adding thank
      linechart.append("path")
        .datum(thank_data_json)
        .attr("fill", "none")
        .attr("stroke", "#1DA1F2")
        .attr("stroke-width", 1.5)
        .attr("d", d3.line()
          .x(function (d) { return scaleX((new Date(d.date))) })
          .y(function (d) { return scaleY(d.occurrences) })
        )

      //adding trump
      linechart.append("path")
        .datum(trump_data_json)
        .attr("fill", "none")
        .attr("stroke", "#1DA1F2")
        .attr("stroke-width", 1.5)
        .attr("d", d3.line()
          .x(function (d) { return scaleX((new Date(d.date))) })
          .y(function (d) { return scaleY(d.occurrences) })
        )

      //adding president
      linechart.append("path")
        .datum(president_data_json)
        .attr("fill", "none")
        .attr("stroke", "#1DA1F2")
        .attr("stroke-width", 1.5)
        .attr("d", d3.line()
          .x(function (d) { return scaleX((new Date(d.date))) })
          .y(function (d) { return scaleY(d.occurrences) })
        )

      //adding obama
      linechart.append("path")
        .datum(obama_data_json)
        .attr("fill", "none")
        .attr("stroke", "#1DA1F2")
        .attr("stroke-width", 1.5)
        .attr("d", d3.line()
          .x(function (d) { return scaleX((new Date(d.date))) })
          .y(function (d) { return scaleY(d.occurrences) })
        )

      svg.append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 0)
        .attr("x", 0 - (height / 2))
        .attr("dy", "1em")
        .style("text-anchor", "middle")
        .style("fill", "white")
        .text("Number of Occurrences");

      svg.append("text")
        .attr("transform",
          "translate(" + ((width / 2)+margin.left) + " ," +
          (height + margin.top + 10) + ")")
        .style("text-anchor", "middle")
        .style("fill", "white")
        .text("Date");

    }
    load_line_graph();


  </script>
</body>

</html>